import { NgModule } from '@angular/core';<% if (sharedModule) { %>
import { SharedModule } from '@app/shared';<% } %><% if (commonModule) { %>
import { CommonModule } from '@angular/common';<% } %><% if (lazyRouteWithoutRouteModule) { %>
import { Routes, RouterModule } from '@angular/router';<% } %>
<% if (routing || lazyRouteWithRouteModule) { %>
import { <%= classify(name) %>RoutingModule } from './<%= dasherize(name) %>-routing.module';<% } %>
<% if (lazyRouteWithoutRouteModule) { %>
const routes: Routes = [
  { path: '', component: <%= classify(name) %>Component }
];<% } %><% if (components) { %>
import * as fromComponents from './components';<% } %><% if (containers) { %>
import * as fromContainers from './containers';<% } %><% if (services) { %>
import * as fromServices from './services';<% } %><% if (pipes) { %>
import * as fromPipes from './pipes';<% } %><% if (directives) { %>
import * as fromDirectives from './directives';<% } %><% if (guards) { %>
import * as fromGuards from './guards';<% } %>

@NgModule({
  declarations: [<% if (components) { %>
    ...fromComponents.components<% } %><% if (containers) { %>,
    ...fromContainers.containers<% } %><% if (pipes) { %>,
    ...fromPipes.pipes<% } %><% if (directives) { %>,
    ...fromDirectives.directives<% } %>
  ],
  imports: [
    <% if (sharedModule) { %>SharedModule<% } %><% if (commonModule) { %>, CommonModule<% } %><% if (routing || lazyRouteWithRouteModule) { %>, <%= classify(name) %>RoutingModule<% } %><% if (lazyRouteWithoutRouteModule) { %>,
      RouterModule.forChild(routes)<% } %>
  ]<% if(services || guards || pipes) { %>,
  providers: [<% if (services) { %>
    ...fromServices.services<% } %><% if (guards) { %>,
    ...fromGuards.guards<% } %><% if (pipes) { %>,
    ...fromPipes.pipes<% } %>
  ]<% } %>
})
export class <%= classify(name) %>Module { }
